#!/bin/bash

# adds additional digital inputs and relay outputs to the Raspberry Pi platforms

# the stock RPI Venus distribution includes two relays and two digital inputs
# adding the additional GPIO pins to /etc/venus/gpio_list
# makes additional digital inputs available
# all 5 defined digital inputs are activated by this script
#
# the Raspberry PI default is for the first 8 GPIO pins to have pull UPs
# and the remaining have pull DOWNs. This makes some digital input pins behave differently
# this script also installs a DT overlay that switches to pull UPs for all digital input pins
#
# Only the first relay can be assigned to a function: alarm, genertor start/stop or pump.
# Others are only provided manual on/off control from the menu.
# Six relays are supported. Only the first relay can be assigned to functions
# The remaining relays are manual on/off only.

# run manually initally, then called from reinstallMods
# to uninstall/deactivate, call this script with "uninstall" as first parameter

# original assignments for relays 5 and 6 create conflicts with interrypt pins
#	on hat boards such as the Waveshare dual CANbus hats (regular and FD versions)
#	An option in this setup script allows selection of different GPIO assignments
#	for relays 5 and 6 to avoid these conflicts
#
#	Because this conflict will be rare, the option is considered optional.
#	That is, an automatic install WILL be permitted even if a manual install has not
#		been perfomred.
#
#	VeCanSetup will alert the user of conflicts and prevent installing the second
#		CANbus interface until this script is rerun to move the relay assignments.

# Note, this script DOES require a system reboot.


gpioListFile="/etc/venus/gpio_list"
configFile="/u-boot/config.txt"

# no log file for this package
packageLogFile=""

#### following line incorporates helper resources into this script
source "/data/SetupHelper/HelperResources/IncludeHelpers"
#### end of lines to include helper resources

# convert old options to new one
# leave old options in place in case RpiGpioSetup is reverted to a previous verison
if ! [ -e "$setupOptionsDir/selectedGpioList" ]; then
	if [ -f "$setupOptionsDir/gpio_list" ]; then
		selectedGpioList=4
	elif [ -e "$setupOptionsDir/alternateGpio" ]; then
		selectedGpioList=2
	else
		selectedGpioList=1
	fi
	echo $selectedGpioList > "$setupOptionsDir/selectedGpioList"
fi


# overlay remove and install GPIO overlay
# Note: strings in these two functions MUST MATCH !!!

overlayBeginText="#### change all digital inputs to pull ups"
overlayEndText="#### end change all digital inputs to pull ups"

function removeGpioOverlay ()
{
    if [ -f "$configFile" ] && [ $(grep -c "$overlayBeginText" "$configFile") > 0 ]; then
		logMessage "removing GPIO overlay from config.txt"
		sed -i -e "/$overlayBeginText/,/$overlayEndText/d" "$configFile"
		filesUpdated=true
	fi
}

function installGpioOverlay ()
{
    if [ -f "$configFile" ]; then
		# remove an existing GPIO overlay since it's now different
		if [ $(grep -c "$1" "$configFile") == 0 ]; then
			removeGpioOverlay
		fi

		logMessage "adding overlay $1 to config.txt"
		echo "$overlayBeginText" >> "$configFile"
		echo "dtoverlay=$1" >> "$configFile"
		echo "$overlayEndText" >> "$configFile"
		filesUpdated=true
	fi
}


#### running manually and OK to proceed - prompt for input
if [ $scriptAction == 'NONE' ] ; then
    # display innitial message
    echo
    echo "This package makes the following modifications:"
    echo "  Activates 6 relay outputs"
    echo "  Activates 5 digital inputs"
    echo "  Changes all digital inputs to have pull-ups in stead of a mix of pull up/down"

    standardActionPrompt 'MORE_PROMPTS'

    if [ $scriptAction == 'NONE' ]; then
		if [ -e "$setupOptionsDir/selectedGpioList" ]; then
			selectedGpioList=$( cat "$setupOptionsDir/selectedGpioList" )
		else
			selectedGpioList=1
		fi

		if [ $selectedGpioList == 4 ] && ! [ -e "$setupOptionsDir/gpio_list" ]; then
			echo "WARNING: no custom gpio_list found"
			echo "create $setupOptionsDir/gpio_list then run this script again"
			echo "selecting legacy set for now"
			selectedGpioList=1
		fi

gpioListText=(  "unknown"\
				"(1) legacy GPIO list"\
				"(2) GPIO list for the Waveshare CAN Plus hat"\
				"(3) GPIO list for most other 2-channel CANbus hats"\
				"(4) custom GPIO list" )
		echo
		echo "GPIO assignments for relays and digital inputs may conflict"
		echo "  with some CANbus interface hats or other GPIO uses"
		echo "Conflicts WILL render the Raspberry PI at least partially unresponsive"
		echo "To help avoid conflicts, select the most appropirate GPIO list:"
		echo "  ${gpioListText[1]}"
		echo "  ${gpioListText[2]}"
		echo "  ${gpioListText[3]}"
		echo "  ${gpioListText[4]}"
		echo "  manually create $setupOptionsDir/gpio_list"
		echo
		echo "current GPIO list: ${gpioListText[$selectedGpioList]}"
		while true ; do
			read -p "select new list by number (cr for no change): " response
			if [ -z $response ]; then
				echo "GPIO list unchanged:  ${gpioListText[$selectedGpioList]}"
				break
			fi
			case $response in
				1)
					selectedGpioList=1
					;;
				2)
					selectedGpioList=2
					;;
				3)
					selectedGpioList=3
					;;
				4)
					if [ -e "$setupOptionsDir/gpio_list" ]; then
						selectedGpioList=4
					else
						echo "WARNING: no custom GPIO list found"
						echo "create $setupOptionsDir/gpio_list then run this script again"
						echo "make another selection for now"
						continue
					fi
					;;
				*)
					echo "$response is invalid"
					continue
					;;
			esac
			echo "new GPIO list: ${gpioListText[$selectedGpioList]}"
			break
		done
		
		echo $selectedGpioList > "$setupOptionsDir/selectedGpioList"

		scriptAction='INSTALL'
	fi
fi
#### installing
if [ $scriptAction == 'INSTALL' ] ; then


	if [ -e "$setupOptionsDir/selectedGpioList" ]; then
		selectedGpioList=$( cat "$setupOptionsDir/selectedGpioList" )
	else
		selectedGpioList=1
	fi

	gpioOverlay=""
	case $selectedGpioList in
		1)
			logMessage "installing ${gpioListText[$selectedGpioList]}"
			updateActiveFile "$gpioListFile"
			gpioOverlay="VenusGpioOverlayLegacy"

			;;
		2)
			logMessage "installing ${gpioListText[$selectedGpioList]}"
			updateActiveFile "$pkgFileSets/gpio_listForCanPlusHat" "$gpioListFile"
			gpioOverlay="VenusGpioOverlayForCanPlusHat"
			;;
		3)
			logMessage "installing ${gpioListText[$selectedGpioList]}"
			updateActiveFile "$pkgFileSets/gpio_listForCanHats" "$gpioListFile"
			gpioOverlay="VenusGpioOverlayForCanHats"
			;;
		4)
			if [ -e "$setupOptionsDir/gpio_list" ]; then
				logMessage "installing ${gpioListText[$selectedGpioList]}"
				updateActiveFile "$setupOptionsDir/gpio_list" "$gpioListFile"
			else
				setInstallFailed &EXIT_OPTIONS_NOT_SET "no custom GPIO list found"
			fi
			;;
		*)
			setInstallFailed &EXIT_OPTIONS_NOT_SET "$selectedGpioList not a valid GPIO list number"
			;;
	esac

	if ! $uninstallFailed ; then
		if ! [ -z $gpioOverlay ]; then
			installGpioOverlay $gpioOverlay
		else
			removeGpioOverlay
		fi
	fi
fi

# uninstalling - check scriptAction again
# if an install step failed package needs to be removed
if [ $scriptAction == 'UNINSTALL' ] ; then

    # remove mods from configFile - do not use restore in case other mods were made manually
    if [ -f "$configFile" ]; then
		removeGpioOverlay
	fi
fi

if $filesUpdated ; then
    rebootNeeded=true
fi

# thats all folks - SCRIPT EXITS INSIDE THE FUNCTION
endScript 'INSTALL_FILES'

